name: Deploy AI to PROD MIG

on:
  push:
    branches: [ test1 ]

env:
  PROJECT_ID: master-isotope-462503-m9
  REGION: asia-northeast3
  IMAGE: asia-northeast3-docker.pkg.dev/master-isotope-462503-m9/ai/cafeboo-ai

jobs:
  # === 1. Docker Build 및 GCR Push ===
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_2 }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          version: latest

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # BuildKit 기반 buildx 설정
      - name: Set up QEMU Buildx
        uses: docker/setup-buildx-action@v2

      # Buildx 캐시 디렉토리 설정
      - name: Cache Buildx
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # 빌드 시 BuildKit 캐시 적용
      - name: Build & Push Docker Image
        run: |
          docker buildx build \
            --push \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t ${{ env.IMAGE }}:${{ github.sha }} .

      # 새로 생성된 캐시를 기존 캐시 디렉토리로 이동
      - name: Update buildx cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # === 2. GCP VM에 배포 ===
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY_2 }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          version: latest

      # Template 이름 고유하게 생성
      - name: Compute Unique Template Name
        run: |
          echo "TEMPLATE_NAME=ai-template-$(date +%s)" >> $GITHUB_ENV

      # startup.sh 생성
      - name: Generate Startup Script
        run: |
          cat <<'EOF' > startup.sh
          #!/bin/bash
          set -e
          apt-get update && apt-get install -y docker.io
          gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${REGION}-docker.pkg.dev
          docker pull ${IMAGE}:${GITHUB_SHA}
          docker stop cafeboo-ai || true; docker rm cafeboo-ai || true
          docker run -d --name cafeboo-ai --network host \
            -e GOOGLE_API_KEY='${{ secrets.GOOGLE_API_KEY }}' \
            -e UPSTAGE_API_KEY='${{ secrets.UPSTAGE_API_KEY }}' \
            ${IMAGE}:${GITHUB_SHA}
          EOF

      # Instance Template 생성
      - name: Create Instance Template
        run: |
          gcloud compute instance-templates create "${{ env.TEMPLATE_NAME }}" \
            --project=${{ env.PROJECT_ID }} \
            --region=${{ env.REGION }} \
            --machine-type=e2-medium \
            --subnet=projects/${{ env.PROJECT_ID }}/regions/${{ env.REGION }}/subnetworks/v2-prod-vpc-private-ai-a \
            --tags=ai \
            --metadata-from-file startup-script=startup.sh \
            --no-address \
            --boot-disk-size=100GB \
            --boot-disk-type=pd-balanced \
            --image-family=ubuntu-2204-lts \
            --image-project=ubuntu-os-cloud \
            --service-account=terraform@master-isotope-462503-m9.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/cloud-platform

      # MIG Rolling Update 수행
      - name: Rolling Update MIG with New Template
        run: |
          gcloud compute instance-groups managed rolling-action start-update ai-mig \
            --region=${{ env.REGION }} \
            --version=template="${{ env.TEMPLATE_NAME }}"